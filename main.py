import logging
import aiohttp
import asyncio
import random

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ChatMemberUpdated

# üîê –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = "7991964078:AAH52l2MVnbjtoQlU76AVJpBt7-2SJW1Nko"
OPENROUTER_API_KEY = "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"

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# üòÇ –°–ø–∏—Å–æ–∫ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
jokes = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ 31 Oct = 25 Dec.",
    "–Ø —Å–∫–∞–∑–∞–ª –∂–µ–Ω–µ, —á—Ç–æ –µ—ë –∫–æ–¥ ‚Äî —Å–ø–∞–≥–µ—Ç—Ç–∏. –¢–µ–ø–µ—Ä—å —è —É–∂–∏–Ω–∞—é –æ–¥–∏–Ω.",
    "–ë–æ—Ç —Å–ª–æ–º–∞–ª—Å—è... –Ω–æ –Ω–µ —Å–¥–∞–ª—Å—è! ü§ñ",
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ —Å–ø—è—Ç, –æ–Ω–∏ –ø—Ä–æ—Å—Ç–æ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è."
]

# üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
conversation_history = []

# üß† –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter GPT —Å –∏—Å—Ç–æ—Ä–∏–µ–π
async def get_openrouter_response(user_message: str, conversation_history: list) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    conversation_history.append({"role": "user", "content": user_message})

    json_data = {
        "model": "openai/gpt-3.5-turbo",
        "messages": conversation_history
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=json_data) as resp:
            try:
                result = await resp.json()
                logging.info(f"–û—Ç–≤–µ—Ç OpenRouter: {result}")  # –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç

                if "choices" not in result:
                    error_message = result.get("error", {}).get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    raise ValueError(f"–û—à–∏–±–∫–∞ OpenRouter: {error_message}")

                reply = result["choices"][0]["message"]["content"]
                conversation_history.append({"role": "assistant", "content": reply})

                return reply, conversation_history
            except Exception as e:
                raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {e}")

# üìå –ö–æ–º–∞–Ω–¥–∞ /–∞–Ω–µ–∫–¥–æ—Ç
@dp.message(F.text.lower() == "/–∞–Ω–µ–∫–¥–æ—Ç")
async def send_joke(message: Message):
    await message.reply(random.choice(jokes))

# üìå –ö–æ–º–∞–Ω–¥–∞ /–ø–æ–º–æ—â—å
@dp.message(F.text.lower() == "/–ø–æ–º–æ—â—å")
async def send_help(message: Message):
    @dp.message(F.text.lower() == "/–ø–æ–º–æ—â—å")
async def send_help(message: Message):
    help_text = (
        "ü§ñ –Ø ‚Äî —É–º–Ω—ã–π Telegram –±–æ—Ç!\n\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ ‚Äî –∏ —è –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ GPT\n"
        "‚Ä¢ /–∞–Ω–µ–∫–¥–æ—Ç ‚Äî –ø–æ–ª—É—á–∏ —à—É—Ç–∫—É\n"
        "‚Ä¢ /–ø–æ–º–æ—â—å ‚Äî –ø–æ–∫–∞–∂—É —ç—Ç–æ –º–µ–Ω—é"
    )
    await message.reply(help_text)
