import logging
import aiohttp
import asyncio
import random

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ChatMemberUpdated

# üîê –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = "–≤—Å—Ç–∞–≤—å_—Å–≤–æ–π_—Ç–æ–∫–µ–Ω_—Å—é–¥–∞"
OPENROUTER_API_KEY = "–≤—Å—Ç–∞–≤—å_—Å–≤–æ–π_api_–∫–ª—é—á_—Å—é–¥–∞"

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# üòÇ –°–ø–∏—Å–æ–∫ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
jokes = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ 31 Oct = 25 Dec.",
    "–Ø —Å–∫–∞–∑–∞–ª –∂–µ–Ω–µ, —á—Ç–æ –µ—ë –∫–æ–¥ ‚Äî —Å–ø–∞–≥–µ—Ç—Ç–∏. –¢–µ–ø–µ—Ä—å —è —É–∂–∏–Ω–∞—é –æ–¥–∏–Ω.",
    "–ë–æ—Ç —Å–ª–æ–º–∞–ª—Å—è... –Ω–æ –Ω–µ —Å–¥–∞–ª—Å—è! ü§ñ",
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ —Å–ø—è—Ç, –æ–Ω–∏ –ø—Ä–æ—Å—Ç–æ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è."
]

# üß† –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter GPT —Å –∏—Å—Ç–æ—Ä–∏–µ–π
async def get_openrouter_response(user_message: str, conversation_history: list) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    conversation_history.append({"role": "user", "content": user_message})

    json_data = {
        "model": "openai/gpt-3.5-turbo",
        "messages": conversation_history
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=json_data) as resp:
            result = await resp.json()
            reply = result['choices'][0]['message']['content']

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç ChatGPT –≤ –∏—Å—Ç–æ—Ä–∏—é
            conversation_history.append({"role": "assistant", "content": reply})

            return reply, conversation_history

# üìå –ö–æ–º–∞–Ω–¥–∞ /–∞–Ω–µ–∫–¥–æ—Ç
@dp.message(F.text.lower() == "/–∞–Ω–µ–∫–¥–æ—Ç")
async def send_joke(message: Message):
    await message.reply(random.choice(jokes))

# üìå –ö–æ–º–∞–Ω–¥–∞ /–ø–æ–º–æ—â—å
@dp.message(F.text.lower() == "/–ø–æ–º–æ—â—å")
async def send_help(message: Message):
    help_text = (
        "üëã –Ø –≤–µ—Å—ë–ª—ã–π –±–æ—Ç –¥–ª—è —á–∞—Ç–∞!\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò (ChatGPT)\n"
        "‚Ä¢ /–∞–Ω–µ–∫–¥–æ—Ç ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É —à—É—Ç–∫—É\n"
        "‚Ä¢ /–ø–æ–º–æ—â—å ‚Äî –ø–æ–∫–∞–∂—É —ç—Ç–æ –º–µ–Ω—é\n"
        "‚Ä¢ –†–µ–∞–≥–∏—Ä—É—é –Ω–∞ '–±–æ—Ç —Ç—ã —Ç—É—Ç?' üòÑ\n"
        "‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    )
    await message.reply(help_text)

# üîç –†–µ–∞–∫—Ü–∏—è –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
@dp.message(F.text.lower().contains("–±–æ—Ç"))
async def reply_to_bot_mention(message: Message):
    if "—Ç—ã –≥–¥–µ" in message.text.lower() or "—Ç—É—Ç" in message.text.lower():
        await message.reply("–Ø —Ç—É—Ç! –ù–µ —Å–ø–ª—é üòÑ")

# üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.chat_member()
async def greet_new_member(update: ChatMemberUpdated):
    old = update.old_chat_member
    new = update.new_chat_member

    if old.status in ("left", "kicked") and new.status == "member":
        user = new.user
        welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{user.full_name}</b>!\n–†–∞—Å—Å–∞–∂–∏–≤–∞–π—Å—è –ø–æ—É–¥–æ–±–Ω–µ–µ üòÑ"
        await bot.send_message(update.chat.id, welcome_text)

# ü§ñ –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ GPT —Å –∏—Å—Ç–æ—Ä–∏–µ–π
conversation_history = []

@dp.message()
async def handle_message(message: Message):
    global conversation_history
    try:
        reply, conversation_history = await get_openrouter_response(message.text, conversation_history)
        await message.reply(reply)
    except Exception as e:
        await message.reply(f"–£–ø—Å! –û—à–∏–±–∫–∞: {e}")

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
